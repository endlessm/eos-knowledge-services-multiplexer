#!/usr/bin/python3

from argparse import ArgumentParser
import json
import os
import subprocess

PROGDIR = os.path.dirname(__file__)
BASE_MANIFEST_TEMPLATE = os.path.join(
    PROGDIR, 'com.endlessm.BaseEknServicesMultiplexer.json.in')
BASE_METAINFO_TEMPLATE = os.path.join(
    PROGDIR, 'com.endlessm.BaseEknServicesMultiplexer.metainfo.xml.in')
MULTIPLEXER_MANIFEST_TEMPLATE = os.path.join(
    PROGDIR, 'com.endlessm.EknServicesMultiplexer.json.in')
MULTIPLEXER_METAINFO_TEMPLATE = os.path.join(
    PROGDIR, 'com.endlessm.EknServicesMultiplexer.metainfo.xml.in')
DIRECTORIES_MODULE_NAME = 'multi-eos-knowledge-services-directories'
COMPAT_ARCHES = [
    'x86_64',
    'arm',
]
SDK_BRANCH = '5'


def get_output_filename(template_filename):
    return os.path.splitext(template_filename)[0]


def replace_placeholders(content, **kwargs):
    replacements = {
        '@SDK_BRANCH@': SDK_BRANCH,
        '@BRANCH@': kwargs['branch'],
        '@ARCH@': kwargs['arch'],
        '@GIT_CLONE_BRANCH@': os.environ.get('GIT_COMMIT', 'HEAD')
    }
    for key, replacement in replacements.items():
        content = content.replace(key, replacement)
    return content


def replace_file_template_placeholders(template_filename, **kwargs):
    with open(template_filename, 'r') as ftemplate:
        with open(get_output_filename(template_filename), 'w') as foutput:
            foutput.write(replace_placeholders(ftemplate.read(), **kwargs))


def generate_base_manifest(**kwargs):
    with open(BASE_MANIFEST_TEMPLATE, 'r') as ftemplate:
        manifest = json.load(ftemplate)

    # Newer architectures don't provide EknServices 1 & 2 extensions
    if kwargs['arch'] in COMPAT_ARCHES:
        manifest['add-extensions'].update({
            'com.endlessm.EknServices.Extension': {
                'directory': 'build/eos-knowledge-services/1',
                'version': 'eos3',
            },
            'com.endlessm.EknServices2.Extension': {
                'directory': 'build/eos-knowledge-services/2',
                'version': 'stable',
            },
        })

        directories_module = None
        for module in manifest['modules']:
            if module['name'] == DIRECTORIES_MODULE_NAME:
                directories_module = module
                break
        if directories_module is None:
            raise Exception(f'Could not find module {DIRECTORIES_MODULE_NAME}')
        directories_module['build-commands'] += [
            'mkdir -p /app/build/eos-knowledge-services/1',
            'mkdir -p /app/build/eos-knowledge-services/2',
        ]

    with open(get_output_filename(BASE_MANIFEST_TEMPLATE), 'w') as foutput:
        foutput.write(replace_placeholders(json.dumps(manifest, indent=4),
                                           **kwargs))


def generate_multiplexer_manifest(**kwargs):
    with open(MULTIPLEXER_MANIFEST_TEMPLATE, 'r') as ftemplate:
        manifest = json.load(ftemplate)

    manifest['add-extensions'].update({
        'com.endlessm.apps.Platform@5': {
            'directory': 'sdk/5',
            'no-autodownload': True,
            'version': '5',
        },
        'com.endlessm.apps.Platform@6': {
            'directory': 'sdk/6',
            'no-autodownload': True,
            'version': '6',
        },
    })

    # Newer architectures don't provide EknServices 1 & 2 extensions or
    # SDK versions before 5.
    if kwargs['arch'] in COMPAT_ARCHES:
        manifest['base-extensions'] += [
            'com.endlessm.EknServices.Extension',
            'com.endlessm.EknServices2.Extension',
        ]
        manifest['finish-args'] += [
            '--own-name=com.endlessm.EknServices.SearchProviderV1',
            '--own-name=com.endlessm.EknServices2.SearchProviderV2',
        ]
        manifest['add-extensions'].update({
            'com.endlessm.Platform': {
                'directory': 'sdk/0',
                'no-autodownload': True,
                'versions': 'eos3.1;eos3.0',
            },
            'com.endlessm.apps.Platform@1': {
                'directory': 'sdk/1',
                'no-autodownload': True,
                'version': '1',
            },
            'com.endlessm.apps.Platform@2': {
                'directory': 'sdk/2',
                'no-autodownload': True,
                'version': '2',
            },
            'com.endlessm.apps.Platform@3': {
                'directory': 'sdk/3',
                'no-autodownload': True,
                'version': '3',
            },
            'com.endlessm.apps.Platform@4': {
                'directory': 'sdk/4',
                'no-autodownload': True,
                'version': '4'
            },
        })

        directories_module = None
        for module in manifest['modules']:
            if module['name'] == DIRECTORIES_MODULE_NAME:
                directories_module = module
                break
        if directories_module is None:
            raise Exception(f'Could not find module {DIRECTORIES_MODULE_NAME}')

        directories_build_commands = directories_module['build-commands']
        directories_build_commands += [f'mkdir -p /app/sdk/{version}'
                                       for version in range(1, 7)]
        for version in range(1, 3):
            directories_build_commands += [
                ('cp -r /app/build/eos-knowledge-services/{v} '
                 '/app/eos-knowledge-services/{v}'
                 .format(v=version)),
                ('mv /app/eos-knowledge-services/{v}/lib/debug '
                 '/app/lib/debug/eos-knowledge-services/{v}'
                 .format(v=version)),
                ('ln -s '
                 '/app/eos-knowledge-services/{v}/bin/eks-search-provider-v{v} '
                 '/app/bin/eks-search-provider-v{v}'
                 .format(v=version)),
            ]

    with open(get_output_filename(MULTIPLEXER_MANIFEST_TEMPLATE), 'w') as foutput:
        foutput.write(replace_placeholders(json.dumps(manifest, indent=4),
                                           **kwargs))


ap = ArgumentParser(
    description='Generate EknServicesMultiplexer manifests'
)
ap.add_argument('--arch', default=os.getenv('FLATPAK_ARCH'),
                help='flatpak architecture')
ap.add_argument('--branch', required=True,
                help='flatpak branch')
args = ap.parse_args()

if args.arch is None:
    # Use flatpak --default-arch for local testing
    cmd = ('flatpak', '--default-arch')
    args.arch = subprocess.check_output(cmd).decode('utf-8').strip()

args = vars(args)

generate_base_manifest(**args)
replace_file_template_placeholders(BASE_METAINFO_TEMPLATE, **args)
generate_multiplexer_manifest(**args)
replace_file_template_placeholders(MULTIPLEXER_METAINFO_TEMPLATE, **args)
