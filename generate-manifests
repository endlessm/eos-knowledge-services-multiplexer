#!/usr/bin/python3

from argparse import ArgumentParser
import json
import os
import subprocess

PROGDIR = os.path.dirname(__file__)
BASE_MANIFEST_TEMPLATE = os.path.join(
    PROGDIR, 'com.endlessm.BaseEknServicesMultiplexer.json.in')
BASE_METAINFO_TEMPLATE = os.path.join(
    PROGDIR, 'com.endlessm.BaseEknServicesMultiplexer.metainfo.xml.in')
MULTIPLEXER_MANIFEST_TEMPLATE = os.path.join(
    PROGDIR, 'com.endlessm.EknServicesMultiplexer.json.in')
MULTIPLEXER_METAINFO_TEMPLATE = os.path.join(
    PROGDIR, 'com.endlessm.EknServicesMultiplexer.metainfo.xml.in')
DIRECTORIES_MODULE_NAME = 'multi-eos-knowledge-services-directories'
COMPAT_ARCHES = [
    'x86_64',
    'arm',
]
LAST_EKS_VERSION = 4
LAST_SDK_VERSION = 6
SDK_BRANCH = '5'


def get_output_filename(template_filename):
    return os.path.splitext(template_filename)[0]


def replace_placeholders(content, **kwargs):
    replacements = {
        '@SDK_BRANCH@': SDK_BRANCH,
        '@BRANCH@': kwargs['branch'],
        '@ARCH@': kwargs['arch'],
        '@GIT_CLONE_BRANCH@': os.environ.get('GIT_COMMIT', 'HEAD')
    }
    for key, replacement in replacements.items():
        content = content.replace(key, replacement)
    return content


def replace_file_template_placeholders(template_filename, **kwargs):
    with open(template_filename, 'r') as ftemplate:
        with open(get_output_filename(template_filename), 'w') as foutput:
            foutput.write(replace_placeholders(ftemplate.read(), **kwargs))


def is_compat_arch(arch):
    return arch in COMPAT_ARCHES


def should_include_eks_version(eks_version, arch):
    if eks_version >= 3:
        return True

    # Newer architectures don't provide EknServices 1 & 2 extensions
    return is_compat_arch(arch)


def should_include_sdk_version(sdk_version, arch):
    if sdk_version >= 5:
        return True

    # Newer architectures don't provide SDK v4 and older
    return is_compat_arch(arch)


def find_manifest_multi_directories_module(manifest):
    for module in manifest['modules']:
        if module['name'] == DIRECTORIES_MODULE_NAME:
            return module

    raise Exception(f'Could not find module {DIRECTORIES_MODULE_NAME}')


def generate_base_manifest(**kwargs):
    with open(BASE_MANIFEST_TEMPLATE, 'r') as ftemplate:
        manifest = json.loads(replace_placeholders(ftemplate.read(), **kwargs))

    directories_module = find_manifest_multi_directories_module(manifest)

    for eks_version in range(1, LAST_EKS_VERSION + 1):
        if should_include_eks_version(eks_version, kwargs['arch']):
            if eks_version == 1:
                eks_branch = 'eos3'
            elif eks_version == LAST_EKS_VERSION:
                # Use latest EknServices master branch if we are building for
                # master. Earlier EknServices extension versions should always
                # always use stable branch.
                eks_branch = kwargs['branch']
            else:
                eks_branch = 'stable'
            eks_id_segment_version = '' if eks_version == 1 else str(eks_version)

            manifest['add-extensions'].update({
                f'com.endlessm.EknServices{eks_id_segment_version}.Extension@{eks_branch}': {
                    'directory': f'build/eos-knowledge-services/{eks_version}',
                    'version': eks_branch
                },
            })

            directories_module['build-commands'].append(
                f'mkdir -p /app/build/eos-knowledge-services/{eks_version}',
            )

    with open(get_output_filename(BASE_MANIFEST_TEMPLATE), 'w') as foutput:
        foutput.write(json.dumps(manifest, indent=4))


def generate_multiplexer_manifest(**kwargs):
    with open(MULTIPLEXER_MANIFEST_TEMPLATE, 'r') as ftemplate:
        manifest = json.loads(replace_placeholders(ftemplate.read(), **kwargs))

    directories_build_commands = \
        find_manifest_multi_directories_module(manifest)['build-commands']

    for sdk_version in range(0, LAST_SDK_VERSION + 1):
        if should_include_sdk_version(sdk_version, kwargs['arch']):
            if sdk_version == 0:
                manifest['add-extensions'].update({
                    'com.endlessm.Platform': {
                        'directory': 'sdk/0',
                        'no-autodownload': True,
                        'versions': 'eos3.1;eos3.0',
                    },
                })
            else:
                manifest['add-extensions'].update({
                    f'com.endlessm.apps.Platform@{sdk_version}': {
                        'directory': f'sdk/{sdk_version}',
                        'no-autodownload': True,
                        'version': str(sdk_version),
                    },
                })
                directories_build_commands.append(f'mkdir -p /app/sdk/{sdk_version}')

    for eks_version in range(1, LAST_EKS_VERSION + 1):
        if should_include_eks_version(eks_version, kwargs['arch']):
            eks_id_segment_version = '' if eks_version == 1 else str(eks_version)

            manifest['base-extensions'].append(
                f'com.endlessm.EknServices{eks_id_segment_version}.Extension'
            )

            manifest['finish-args'].append(
                f'--own-name=com.endlessm.EknServices{eks_id_segment_version}'
                f'.SearchProviderV{eks_version}'
            )

            directories_build_commands += [
                (f'cp -r /app/build/eos-knowledge-services/{eks_version} '
                 f'/app/eos-knowledge-services/{eks_version}'),

                (f'mv /app/eos-knowledge-services/{eks_version}/lib/debug '
                 f'/app/lib/debug/eos-knowledge-services/{eks_version}'),

                ('ln -s '
                 f'/app/eos-knowledge-services/{eks_version}'
                 f'/bin/eks-search-provider-v{eks_version} '
                 f'/app/bin/eks-search-provider-v{eks_version}')
            ]
    with open(get_output_filename(MULTIPLEXER_MANIFEST_TEMPLATE), 'w') as foutput:
        foutput.write(json.dumps(manifest, indent=4))


ap = ArgumentParser(
    description='Generate EknServicesMultiplexer manifests'
)
ap.add_argument('--arch', default=os.getenv('FLATPAK_ARCH'),
                help='flatpak architecture')
ap.add_argument('--branch', required=True,
                help='flatpak branch')
args = ap.parse_args()

if args.arch is None:
    # Use flatpak --default-arch for local testing
    cmd = ('flatpak', '--default-arch')
    args.arch = subprocess.check_output(cmd).decode('utf-8').strip()

args = vars(args)

generate_base_manifest(**args)
replace_file_template_placeholders(BASE_METAINFO_TEMPLATE, **args)
generate_multiplexer_manifest(**args)
replace_file_template_placeholders(MULTIPLEXER_METAINFO_TEMPLATE, **args)
